import { OpenOpts } from '.';
interface Cursor {
    value: any;
    offset: number;
}
export default class Decoder {
    telemetry: Record<string, any>;
    private db;
    private baseOffset;
    private cache;
    constructor(db: Buffer, baseOffset?: number, opts?: OpenOpts);
    decode(offset: number): any;
    decodeFast(offset: number): any;
    decodeByType(type: string, offset: number, size: number): Cursor;
    sizeFromCtrlByte(ctrlByte: number, offset: number): Cursor;
    decodeBytes(offset: number, size: number): Buffer;
    decodePointer(ctrlByte: number, offset: number): Cursor;
    decodeArray(size: number, offset: number): Cursor;
    decodeBoolean(size: number): boolean;
    decodeDouble(offset: number): number;
    decodeFloat(offset: number): number;
    decodeMap(size: number, offset: number): Cursor;
    decodeInt32(offset: number, size: number): number;
    decodeUint(offset: number, size: number): string | number;
    decodeString(offset: number, size: number): any;
    decodeBigUint(offset: number, size: number): string;
}
export {};
